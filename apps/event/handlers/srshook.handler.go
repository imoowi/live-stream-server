/*
generated by comer,https://github.com/imoowi/comer
Copyright © 2023 jun<simpleyuan@gmail.com>
*/
package handlers

import (
	"github.com/gin-gonic/gin"
	"github.com/imoowi/comer/utils/response"
	"github.com/imoowi/live-stream-server/apps/event/models"
	"github.com/imoowi/live-stream-server/apps/event/services"
	"net/http"

	"github.com/spf13/cast"
)

//	@Summary	分页列表(pagelist)
//	@Tags		event
//	@Accept		application/json
//	@Produce	application/json
//	@Param		Authorization	header		string				true	"Bearer 用户令牌"
//	@Param		{object}		query		models.SrshookQuery	false	"query参数"
//	@Success	200				{object}	response.PageList	"成功"
//	@Failure	400				"请求错误"
//	@Failure	401				"token验证失败"
//	@Failure	500				"内部错误"
//	@Router		/api/srshooks [get]
func SrshookPageList(c *gin.Context) {
	var query models.SrshookQuery
	err := c.ShouldBindQuery(&query)
	if err != nil {
		response.Error(err.Error(), http.StatusBadRequest,c)
		return
	}
	/*
	if 0 >= query.Page && 0 >= query.PageSize{
		result, err := services.Srshook.All(c, &query)
		if err != nil {
			response.Error(err.Error(), http.StatusBadRequest,c)
			return
		}
		response.OK(result,c)
		return
	}
	//*/
	if 0 >= query.Page{ //如果不传Page，默认为1
		query.Page = 1
	}
	if 0 >= query.PageSize{ //如果不传PageSize，默认取20条
		query.PageSize = 20
	}
	if query.PageSize > 1000 {
		response.Error(`每一页不能超过1000条记录`, http.StatusBadRequest,c)
		return
	}
	result, err := services.Srshook.PageList(c, &query)
	if err != nil {
		response.Error(err.Error(), http.StatusBadRequest,c)
		return
	}
	response.OK(result,c)
}

//	@Summary	详情(one)
//	@Tags		event
//	@Accept		application/json
//	@Produce	application/json
//	@Param		Authorization	header	string	true	"Bearer 用户令牌"
//	@Param		id				path	int		true	"id"
//	@Success	200
//	@Failure	400	"请求错误"
//	@Failure	401	"token验证失败"
//	@Failure	500	"内部错误"
//	@Router		/api/srshooks/{id} [get]
func SrshookOne(c *gin.Context) {
	id := c.Param(`id`)
	if id == `` {
		response.Error(`pls input id`, http.StatusBadRequest,c)
		return
	}
	one, err := services.Srshook.One(c, cast.ToUint(id))
	if err != nil {
		response.Error(err.Error(), http.StatusBadRequest,c)
		return
	}
	response.OK(one,c)
}

//	@Summary	新增(add)
//	@Tags		event
//	@Accept		application/json
//	@Produce	application/json
//	@Param		Authorization	header	string				true	"Bearer 用户令牌"
//	@Param		{object}		body	models.SrshookAdd	true	"body"
//	@Success	200
//	@Failure	400	"请求错误"
//	@Failure	401	"token验证失败"
//	@Failure	500	"内部错误"
//	@Router		/api/srshooks [post]
func SrshookAdd(c *gin.Context) {
	var srshook *models.SrshookAdd
	err := c.ShouldBindJSON(&srshook)
	if err != nil {
		response.Error(err.Error(), http.StatusBadRequest,c)
		return
	}
	newId, err := services.Srshook.Add(c, srshook)
	if err != nil {
		response.Error(err.Error(), http.StatusBadRequest,c)
		return
	}
	response.OK(newId,c)
}

//	@Summary	更新(update)
//	@Tags		event
//	@Accept		application/json
//	@Produce	application/json
//	@Param		Authorization	header	string					true	"Bearer 用户令牌"
//	@Param		id				path	int						true	"id"
//	@Param		{object}		body	models.SrshookUpdate	true	"body"
//	@Success	200
//	@Failure	400	"请求错误"
//	@Failure	401	"token验证失败"
//	@Failure	500	"内部错误"
//	@Router		/api/srshooks/{id} [put]
func SrshookUpdate(c *gin.Context) {
	id := c.Param(`id`)
	if id == `` {
		response.Error(`pls input id`, http.StatusBadRequest,c)
		return
	}
	var srshook *models.SrshookUpdate
	err := c.ShouldBindJSON(&srshook)
	if err != nil {
		response.Error(err.Error(), http.StatusBadRequest,c)
		return
	}
	updated, err := services.Srshook.Update(c, srshook, cast.ToUint(id))
	if err != nil {
		response.Error(err.Error(), http.StatusBadRequest,c)
		return
	}
	response.OK(updated,c)
}

//	@Summary	部分更新(update)
//	@Tags		event
//	@Accept		application/json
//	@Produce	application/json
//	@Param		Authorization	header	string						true	"Bearer 用户令牌"
//	@Param		id				path	int							true	"id"
//	@Param		{object}		body	models.SrshookPatchUpdate	true	"body"
//	@Success	200
//	@Failure	400	"请求错误"
//	@Failure	401	"token验证失败"
//	@Failure	500	"内部错误"
//	@Router		/api/srshooks/{id} [patch]
func SrshookPatch(c *gin.Context) {
	id := c.Param(`id`)
	if id == `` {
		response.Error(`pls input id`, http.StatusBadRequest, c)
		return
	}
	var srshook *models.SrshookPatchUpdate
	err := c.ShouldBindJSON(&srshook)
	if err != nil {
		response.Error(err.Error(), http.StatusBadRequest,c)
		return
	}
	updated, err := services.Srshook.PatchUpdate(c, srshook, cast.ToUint(id))
	if err != nil {
		response.Error(err.Error(), http.StatusBadRequest, c)
		return
	}
	response.OK(updated, c)
}

//	@Summary	删除(delete)
//	@Tags		event
//	@Accept		application/json
//	@Produce	application/json
//	@Param		Authorization	header	string	true	"Bearer 用户令牌"
//	@Param		id				path	int		true	"id"
//	@Success	200
//	@Failure	400	"请求错误"
//	@Failure	401	"token验证失败"
//	@Failure	500	"内部错误"
//	@Router		/api/srshooks/{id} [delete]
func SrshookDel(c *gin.Context) {
	id := c.Param(`id`)
	if id == `` {
		response.Error(`pls input id`, http.StatusBadRequest,c)
		return
	}
	deleted, err := services.Srshook.Delete(c, cast.ToUint(id))
	if err != nil {
		response.Error(err.Error(), http.StatusBadRequest,c)
		return
	}
	response.OK(deleted,c)
}
