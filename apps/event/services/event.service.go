/*
generated by comer,https://github.com/imoowi/comer
Copyright Â© 2023 jun<simpleyuan@gmail.com>
*/
package services

import (
	"errors"

	"github.com/gin-gonic/gin"
	"github.com/imoowi/live-stream-server/apps/event/models"
	"github.com/imoowi/live-stream-server/apps/event/repos"
	"github.com/imoowi/live-stream-server/global" 
	"github.com/imoowi/comer/utils/response"
	"github.com/jinzhu/copier"
)

var Event *EventService

func RegisterEventService(s *EventService) {
	Event = s
}

type EventService struct {
	EventRepo *repos.EventRepo
}

func newEventService(r *repos.EventRepo) *EventService {
	return &EventService{
		EventRepo: r,
	}
}

func init() {
	global.DigContainer.Provide(newEventService)
	global.RegisterContainerProviders(RegisterEventService)
}

func (s *EventService) All(c *gin.Context, query *models.EventQuery) (res []*models.Event, err error) {
	res, err = s.EventRepo.All(c, query)
	return
}

func (s *EventService) PageList(c *gin.Context, query *models.EventQuery) (res *response.PageList, err error) {
	res, err = s.EventRepo.PageList(c, query)
	return
}

func (s *EventService) One(c *gin.Context, id uint) (model *models.Event, err error) {
	model, err = s.EventRepo.One(c, id)
	return
}

func (s *EventService) OneByName(c *gin.Context, name string) (model *models.Event, err error) {
	model, err = s.EventRepo.OneByName(c, name)
	return
}

func (s *EventService) Add(c *gin.Context, _model *models.EventAdd) (newId uint, err error) {
	model, err := s.EventRepo.OneByName(c, _model.Name)
	if model != nil && model.ID > 0 {
		newId = 0
		err = errors.New(`name existed`)
		return
	}
	newModel := &models.Event{}
	err = copier.Copy(&newModel, _model)
	if err != nil {
		return
	}
	newId, err = s.EventRepo.Add(c, newModel)
	return
}

func (s *EventService) Update(c *gin.Context, _model *models.EventUpdate, id uint) (updated bool, err error) {
	model, err := s.EventRepo.One(c, id)
	if err != nil {
		return
	}
	err = copier.Copy(&model, _model)
	if err != nil {
		return
	}
	updated, err = s.EventRepo.Update(c, model, id)
	return
}

func (s *EventService) PatchUpdate(c *gin.Context, _model *models.EventPatchUpdate, id uint) (updated bool, err error) {
	model, err := s.One(c, id)
	if err != nil {
		return
	}
	err = copier.Copy(&model, _model)
	if err != nil {
		return
	}
	updated, err = s.EventRepo.Update(c, model, id)
	return
}

func (s *EventService) Delete(c *gin.Context, id uint) (deleted bool, err error) {
	deleted, err = s.EventRepo.Delete(c, id)
	return
}
