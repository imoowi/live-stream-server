/*
generated by comer,https://github.com/imoowi/comer
Copyright Â© 2023 jun<simpleyuan@gmail.com>
*/
package services

import (
	"errors"

	"github.com/gin-gonic/gin"
	"github.com/imoowi/live-stream-server/apps/event/models"
	"github.com/imoowi/live-stream-server/apps/event/repos"
	"github.com/imoowi/live-stream-server/global" 
	"github.com/imoowi/comer/utils/response"
	"github.com/jinzhu/copier"
)

var Srshook *SrshookService

func RegisterSrshookService(s *SrshookService) {
	Srshook = s
}

type SrshookService struct {
	SrshookRepo *repos.SrshookRepo
}

func newSrshookService(r *repos.SrshookRepo) *SrshookService {
	return &SrshookService{
		SrshookRepo: r,
	}
}

func init() {
	global.DigContainer.Provide(newSrshookService)
	global.RegisterContainerProviders(RegisterSrshookService)
}

func (s *SrshookService) All(c *gin.Context, query *models.SrshookQuery) (res []*models.Srshook, err error) {
	res, err = s.SrshookRepo.All(c, query)
	return
}

func (s *SrshookService) PageList(c *gin.Context, query *models.SrshookQuery) (res *response.PageList, err error) {
	res, err = s.SrshookRepo.PageList(c, query)
	return
}

func (s *SrshookService) One(c *gin.Context, id uint) (model *models.Srshook, err error) {
	model, err = s.SrshookRepo.One(c, id)
	return
}

func (s *SrshookService) OneByName(c *gin.Context, name string) (model *models.Srshook, err error) {
	model, err = s.SrshookRepo.OneByName(c, name)
	return
}

func (s *SrshookService) Add(c *gin.Context, _model *models.SrshookAdd) (newId uint, err error) {
	model, err := s.SrshookRepo.OneByName(c, _model.Name)
	if model != nil && model.ID > 0 {
		newId = 0
		err = errors.New(`name existed`)
		return
	}
	newModel := &models.Srshook{}
	err = copier.Copy(&newModel, _model)
	if err != nil {
		return
	}
	newId, err = s.SrshookRepo.Add(c, newModel)
	return
}

func (s *SrshookService) Update(c *gin.Context, _model *models.SrshookUpdate, id uint) (updated bool, err error) {
	model, err := s.SrshookRepo.One(c, id)
	if err != nil {
		return
	}
	err = copier.Copy(&model, _model)
	if err != nil {
		return
	}
	updated, err = s.SrshookRepo.Update(c, model, id)
	return
}

func (s *SrshookService) PatchUpdate(c *gin.Context, _model *models.SrshookPatchUpdate, id uint) (updated bool, err error) {
	model, err := s.One(c, id)
	if err != nil {
		return
	}
	err = copier.Copy(&model, _model)
	if err != nil {
		return
	}
	updated, err = s.SrshookRepo.Update(c, model, id)
	return
}

func (s *SrshookService) Delete(c *gin.Context, id uint) (deleted bool, err error) {
	deleted, err = s.SrshookRepo.Delete(c, id)
	return
}
